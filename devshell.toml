[[commands]]
name = "julia2nix"
category = "julia2nix"
command = '''
        if [ ! -d  "./julia2nix" ]; then
        ${pkgs.git}/bin/git clone https://github.com/GTrunSec/julia2nix
        fi
        julia2nix/julia2nix && nix-build
        $(nix-build . --no-out-link)/bin/julia -e 'import Pkg; Pkg.instantiate()'
      '''
help = "generate the Julia Pkg's Nix expression and build Packages"


[[commands]]
name = "julia"
category = "julia"
command = '''
        $(nix-build . --no-out-link)/bin/julia -L $DEVSHELL_ROOT/startup.jl $@
        '''
help = "wrapped Julia executable"


[[commands]]
name = "pluto"
category = "Julia Package"
command = '''
        eval $(echo "$(nix-build . --no-out-link)/bin/julia -e 'import Pkg; Pkg.activate(\".\"); using Pluto; Pluto.run(host=\"$1\", port=$2)'")
        '''
help = "launch pluto server: pluto <ip> <port>"


[[commands]]
name = "addPackage"
category = "Julia Package"
command = '''
        eval $(echo "$(nix-build . --no-out-link)/bin/julia -e 'using Pkg; Pkg.activate(\"$1\"); Pkg.add([$2])'")
        # cleanup JULIA_DEPOT_PATH for Julia2nix Build
        julia2nix/julia2nix && nix-build
        #rm -rf $JULIA_DEPOT_PATH
        '''
help = "Exp: addPackage . '\"StatsFuns, Images\"' -> <activatePath> <Package Name List>"

[[env]]
name = "JULIA_DEPOT_PATH"
value = "./.julia_depot"

[[env]]
name = "PATH"
prefix = "bin"

